{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"Analytics tasks guide","text":"<p><code>Visual library [vl]</code>: Visualisation reference.</p> <p><code>Automate office [ao]</code>: Create powerpoint slides using code.</p> <p><code>File search [fs]</code>: Create flexible document corpus.</p>"},{"location":"1_vl.html","title":"Visual library (vl)","text":""},{"location":"1_vl.html#about","title":"About","text":"<p>A reference point for charts and graphs.</p> <p>Build visualizations leveraging code (.py, .R, .bas) with least time and effort.</p>"},{"location":"1_vl.html#structure","title":"Structure","text":"<p>Includes ready to use codebase plugged in an .html page for easy access and usage.</p> <p></p>"},{"location":"1_vl.html#demo","title":"Demo","text":"<p>Demo in <code>examples\\vl.py</code>.</p>"},{"location":"2_ao.html","title":"Automate office<sup>1</sup>","text":""},{"location":"2_ao.html#about","title":"About","text":"<p><code>Automation</code> to prepare <code>visualization(s)</code> and <code>slide deck at scale</code>.</p> Project structure<pre><code>\u2523\u2501 code                 : User modified main program(s)\n\u2503   \u2523\u2501 ao_batch.py          : Create .pptm presentation in batch mode.\n\u2503   \u2523\u2501 ao_explore.py        : Create individual charts/graphs as in Visual Library.\n\u2503\n\u2523\u2501 input                : User defined directory\n\u2503   \u2523\u2501 ____control.xlsm     : Input to align slide(s) and their content.\n\u2503   \u2523\u2501 data/                : Input .csv files.\n\u2503   \u2523\u2501 img/                 : Input image files.\n\u2503   \u2517\u2501 templates/           : Reusable .potm template\n\u2503\n\u2523\u2501 output:              : Output file format\n\u2503   \u2517\u2501                      : &lt;report-name&gt;__&lt;yyyymmdd&gt;_&lt;hhmm&gt;.pptm\n</code></pre> <p>Automate office integrates <code>excel vba</code>, <code>R</code> and <code>powerpoint presenation</code> elements using <code>python</code>.</p> <p>The structure is build around taking control of placeholder elements of powerpoint master slide.</p> <p>The input to prepare powerpoint deck is structured through a control file.</p>"},{"location":"2_ao.html#demo","title":"Demo","text":"<ul> <li><code>examples\\ao_batch.py</code>: Build slide deck.</li> <li><code>examples\\ao_explore.py</code>: Build individual visualizations.</li> </ul>"},{"location":"2_ao.html#target","title":"Target","text":"<p><code>Process transformation</code> by <code>eliminating manual steps</code> to prepare <code>visualization(s)</code> and <code>slide deck(s)</code>.</p> <ol> <li>The automation targets to save <code>~30%</code> of the time taken to work on new presentation related tasks and <code>~80%</code> of the time on repeat tasks.</li> <li><code>Standardization</code> to bring much <code>desired consistency</code> to <code>insights generated by the team</code>.</li> <li>Adopting <code>script based visualization</code> that are faster and equal to or better than existing options.</li> <li><code>Building product</code> that <code>saves teams time</code> and <code>brings new innovation(s)</code> enabling <code>generating better insights</code> faster.</li> </ol> <p>New tasks</p> <p></p> <p>Repeat tasks</p> <p></p>"},{"location":"2_ao.html#design","title":"Design","text":"<p>Project is designed on following ground rules:</p> <ol> <li><code>What you see is what you get</code>: Visualization or Slide option in Visual Library to guide in choosing available options.</li> <li><code>Limited to no learning curve</code>: Structure the project that anyone can use the automation irrespective of lack of knowledge of a language.</li> <li><code>For a task choose software that works best</code>: If excel works better vs any other software then we do that task in excel.</li> <li><code>Scale, Compatibility, flexibility</code>: Project is designed to be easliy scaled to include large number of visualization(s) providing intutive access to resources needed to build custom visualization and powerpoint presentations. We have tested the codebase across different system combinations (windows 10, 11; Microsoft Office 2016, 2019, 2021, 365, Python 310, 311, 312, 313, R 4.4.3) ensuring programs do not break on known environments. Anyone can contribute to the visualization library following simple rules as laid under <code>developer</code> section.</li> <li><code>End-to-end automated integration</code>: All components of the project are end-to-end automated, E.g. Visual library is autogenerated using python code so no manual maintenace or development. The automated components are integrated, E.g. The data processing takes color input from the PADAWA docs data table. Most of the components of the automation feed on already existing resources in other atuomation projects (<code>padawa_docs</code>, <code>searchx</code>).</li> </ol> <p>Project uses following softwares:</p> <ol> <li><code>.py</code>: Python to control the project.</li> <li><code>.bas</code>: VBA to create visualizations in Excel.</li> <li><code>.potm</code>: Powerpoint to create reusable slide templates.</li> <li><code>.md</code>: Markdown integrates the project and make it easily accessible.</li> <li><code>.R</code>: R to create visualizations not possible through Excel (vba) or Python respectively.</li> </ol>"},{"location":"2_ao.html#usage","title":"Usage","text":""},{"location":"2_ao.html#batchpy","title":"batch.py","text":"<p>In batch mode the sheet named <code>calibration</code> in <code>____control.xlsx</code> file is used to control the number of slides, type of charts, formatting, text and image input to a presentation.</p> <p>Just like <code>explore.py</code> the analyst can see if certain visualizations or slides are present in <code>Visual library</code>, pick and choose the charts and slides that are desired and reference the same in <code>batch.py</code> file.</p> <p>Developer</p> <p></p> <p>A developer needs to understand complex relationship between different elements of the project:</p> <ol> <li> <p><code>Visual library</code></p> <ul> <li>The code and output should be the same named file e.g. <code>bar.bas</code> and its corresponding `bar.jpg' file.</li> <li>Only <code>.bas</code> files to have <code>.jpg</code> output, other code can have other output types like `.png'.</li> <li>Keep the variable names that control the charts consistent across codes irrespective of language.</li> <li>Keep things organized in folders with parent being <code>visaul_library</code> and child folders like <code>compare</code>, <code>distribution</code>, <code>flow</code> and so on.</li> <li>Ensure no repeats in the slide generated by <code>calibration</code> sheet.</li> </ul> </li> <li> <p><code>____control.xlsm</code></p> <ul> <li>Maintain the structure of the sheets in the control file.</li> <li>Understand that the <code>master</code> slide and output in folder <code>output\\learn</code> are related to how this file is derived.</li> </ul> </li> <li> <p><code>batch.py</code></p> <ul> <li>Understand the dependencies and their relationship with all other elements that the program works with.</li> </ul> </li> </ol>"},{"location":"2_ao.html#explorepy","title":"explore.py","text":"<ol> <li><code>Browse</code>: Check if a visualization that is expected exists in the Visual library.</li> <li><code>Copy or load data</code>: Copy data into clipboard from the data source(s).</li> <li><code>Transpose data</code>: Run <code>explore.py</code> <code>Step2</code> to transpose data into <code>xyzv</code> convention.</li> <li><code>Paste transposed data to .xlsm file</code>: Run <code>explore.py 2.3</code> and paste transposed data to <code>cell A1</code> in file generated when initializing <code>explore.py</code>.</li> </ol>"},{"location":"2_ao.html#pipeline","title":"Pipeline","text":"<p><code>CI/CD (Continuous Integration/Continuous Delivery) Pipeline</code> approach allows us to do as much as possible, an <code>end to end integration</code>, eliminating manual data preparation steps in the process.</p>"},{"location":"2_ao.html#future-development","title":"Future development","text":"<ol> <li>Expand <code>Visual library</code> to include most of the frequently used visualizations.</li> <li>Close project libraries for targeted use (right now code is open).</li> <li>Development of <code>adhoc.py</code> (currently code heavy) just in line with <code>explore.py</code> and <code>batch.py</code>.</li> <li>Comments on slides to be powered by either of the feasible solution(s):<ul> <li>Local <code>GPT</code> (Generative Pre-trained Transformer) engine.</li> <li><code>ML</code> (machine learning) based model trained on <code>.ppt* title corpus</code> leveraging <code>searchx</code>.</li> <li><code>MCP</code> (Model Context Protocol) process deployment.</li> </ul> </li> </ol> <ol> <li> <p>Please move around the template master elements as the output .pptx file is less organzied.\u00a0\u21a9</p> </li> </ol>"},{"location":"3_fs.html","title":"File search","text":""},{"location":"3_fs.html#about","title":"About","text":"<p>To index text inside files (.txt, .sql, .excel, .pptx, .docx, .pdf...) in a flexible way, for:</p> <ul> <li>Document classification.</li> <li>File and folder content search, e.g. finding old code, names of sheets in excel files, columns used in database, attachement in .msg files, comments written in .pptx files.</li> <li>Preparing text corpus in a selective manner (e.g. extract only the top headings of powerpoint slides...) for LLM training</li> </ul>"},{"location":"3_fs.html#structure","title":"Structure","text":"<p>File search is a scan of major file types to give control over text corpus usage for further analysis.</p>"},{"location":"3_fs.html#demo","title":"Demo","text":"<ul> <li><code>example\\fs_build.py</code>: Demo to build a text corpus of major file types.</li> <li><code>example\\fs_query.py</code>: Functions to explore the text corpus.</li> <li><code>example\\fs_classification.py</code>: Demo on parsing .sql code from the corpus combined with database information schema to classify and organize .sql codebase. </li> </ul>"},{"location":"bugfix.html","title":"Bugfix","text":""},{"location":"bugfix.html#automate-office","title":"Automate office","text":""},{"location":"bugfix.html#_template_path-not-found","title":"_template_path not found","text":"Error &amp; Solution Problem: ApplyTemplate<pre><code>*Error comes after running this line\n_control, _template_path = execute_pptx_pipeline(\n    _control,\n    scan_python_functions_from_file_s,\n    _visual_library_dir,\n    _learn_dir,\n    _chart_data_dir,\n    _image_dir,\n    _colors_file,\n    _template_path,\n    _template_pathx,\n    _output_pptm,\n    slide_master_text_elements,\n)\n\n\n*Error Message: \nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\n  File \"C:\\Users\\user\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\analytics_tasks\\automate_office\\build_batch.py\", line 223, in execute_pptx_pipeline\n    create_or_apply_potm(_template_pathx, outputpptm, _control)\n  File \"C:\\Users\\user\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\analytics_tasks\\automate_office\\build_batch.py\", line 1508, in create_or_apply_potm\n    ppt.ApplyTemplate(_template_path)\n  File \"C:\\Users\\user\\AppData\\Local\\Temp\\gen_py\\3.11\\91493440-5A91-11CF-8700-00AA0060263Bx0x2x12\\_Presentation.py\", line 50, in ApplyTemplate\n    return self.oleobj.InvokeTypes(2007, LCID, 1, (24, 0), ((8, 1),),FileName\n          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\npywintypes.com_error: (-2147352567, 'Exception occurred.', (0, 'Microsoft PowerPoint', 'Presentation.ApplyTemplate : Object does not exist.', '', 0, -2147188720), None)\n\n\n*Solution: Complete win32 postinstall\ncd C:\\Users\\user\\AppData\\Local\\Programs\\Python\\Python311\npython Scripts/pywin32_postinstall.py -install\n\n\n*Powershell message postinstall\nParsed arguments are: Namespace(install=True, remove=False, wait=None, silent=False, quiet=False, destination='C:\\\\Users\\\\user\\\\AppData\\\\Local\\\\Programs\\\\Python\\\\Python311\\\\Lib\\\\site-packages')\nCopied pythoncom311.dll to C:\\Users\\user\\AppData\\Local\\Programs\\Python\\Python311\\pythoncom311.dll\nCopied pywintypes311.dll to C:\\Users\\user\\AppData\\Local\\Programs\\Python\\Python311\\pywintypes311.dll\nYou do not have the permissions to install COM objects.\nThe sample COM objects were not registered.\n-&gt; Software\\Python\\PythonCore\\3.11\\Help[None]=None\n-&gt; Software\\Python\\PythonCore\\3.11\\Help\\Pythonwin Reference[None]='C:\\\\Users\\\\user\\\\AppData\\\\Local\\\\Programs\\\\Python\\\\Python311\\\\Lib\\\\site-packages\\\\PyWin32.chm' \nRegistered help file\nPythonwin has been registered in context menu\nCreating directory C:\\Users\\user\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\win32com\\gen_py\nShortcut for Pythonwin created\nShortcut to documentation created\nThe pywin32 extensions were successfully installed.\n</code></pre>"},{"location":"bugfix.html#file-search","title":"File search","text":""},{"location":"bugfix.html#file-search-xlrd-issue","title":"File search xlrd issue","text":"Error &amp; Solution Problem: xlrd not installed<pre><code>*Error comes after running this line\nscan_drives(scan, scan_ext)\n\n*Error message\nc:\\time_series\\example\\exponantial_smoothing.xls\n2025-06-24 19:57:04,540 | [INFO] | user | ERROR: function load_ifp_xlsx... cannot read file c:\\time_series\\example\\exponantial_smoothing.xls\n2025-06-24 19:57:04,540 | [INFO] | user | Error details: openpyxl does not support the old .xls file format, please use xlrd to read this file, or convert it to the more recent .xlsx file format.\n\n*Solution\nuv pip install --system xlrd\n</code></pre>"}]}